--Basics--
- Git code revisions are "pointing" to it's original version (before the revision/change).
- For example, in the below, assume "A1" is the original commit and subsequent commits are 
  revisions that stem from the previous code.
  F1 <- F1 <- F1 <- F1 <- ...
  A1 <- B2 <- C3 <- D4 <- ...
- Notice that the Master Branch will continue to be X in the Terminal until all (except files that are in 
  the .gitignore hidden file in the root of the repo) are Tracked and Committed.

--Git Areas--
- Staging Area can also be known as the "Index"
- There is another area known as the History (of the Master Branch)
- Then there is the "Working Tree" which is the directory where you work in.
- so a typical flow may look like
  Changes in Working Tree > Pushed to Staging or Index > Committed to the History of the Master Branch

--Commands--
- git init : initilizes git, turns the current directory into a git Working Tree. Addes the .git hidden
  folder. Note you can easily remove the git hidden folder from a given Working Tree whenever you like 
  (this blows away the staging area and the entire .git repo)
- git status : shows things in the Working Tree which are in or out of Staging, and other statuses.
- git add <file> : this will stage a file from your Working Tree to your Staging to be picked up for the
  next commit. Note that you cannot git add an empty directory or directory structure to Staging. (if you
  need to for whatever reason, you can add a small hidden .gitkeep file to fool git to catch your 
  change.
- git commit -m 'I am chaging something' : this will commit everything that you've staged thus far to
  the master branch by default. -m <argv> is the comment for the change (I assume).
- git log : shows you details on commits to the History area, such as the Hash ID of the commit,
  the author and the timestamps, etc.
- git la : this shows you the actual changes of the History, such as lines of code changes, note that the 
  "la" argument is a user defined alias for a longer argument. 
- git ll : this shows you the changes, but without the details w/o lines of code. Note that the "ll" argument 
  is an alias for a longer argument. It can be found somewhere in a config file.  
- git reset <file> : this unstages a file or something that you've staged for commit.
- git remote [add <remote git address alias>] : make a name and associate it to a URL for the the gitHub
- git push -u <remote git addres alieas> <name of master branch> : push changes up to <name of master> where
  using the alias of the remote git address you've added. Note, after you push once from a local repo to a 
  remote repo, they remember each other and you can afterwards do just "git push"
- git clone <url> <optional name>: make a git repo that is identical to the repo the url is pointing to.
- git diff <head -n 4> : shows differences in a file, for example before we want to commit something. the optional
  head subcommand gives you just the first N changes. note that this only gives you changes in the working
  tree.
- git df : this gives you the changes in both staging and history (I think)
- git dfs : this gives you the changes in just staging (I think)
- git rm : makes a file (or dir with -r) untracked in the repo. Note that this also deletes the file when 
  commited. Also note that even for deletions such as this we need to push to staging and then commit like 
  any other change.
- git reset --soft HEAD^ : rollback the last commit. the --soft portion means it doesn't just lose the change
  it will stage the reset to queue it for staging.
- git stash : stash "remembers" a stack of changes which can later be Pop'ed off back into the working
  tree. the Stash will by default add to the stack whatever is changed in your current working directory.
  Note that you can specify a single specific file to stash on the stack instead of everything that is
  changed.
- git commit --amend : what this does is replaces the last commit. If you know for sure your code is
  broken on the last commit, this might be useful. Also useful when you are ammending a submitted
  Code Review post. For all practical purposes, you can revert a revision (an ammendment), not
  exactly a use case. BUT there is hairy way to do it using something called reflog.
- git commit --amend -no-edit : does ammend without prompting for the commit message you added from
  the last commit.
- (not git but useful) rbt post -u : posts the last commit to Code Review. the dash -u matches the
  id of the CR you want to post to.
- .gitignore will not kick in until it is tracked (staged) at least. If you add something to .gitignore
  when that something is already in the remote repository, then it won't remove that from remote,
  it will simply stop looking for updates for the thing (and anyone who pulls down your remote) will
  also have the same affect. That something will be frozen in time.
