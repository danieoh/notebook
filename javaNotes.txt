==Array Lists==
- a resizable array for all practical purposes. It's part of collections. the .add method will add to the end of
  a list, you can add to a specific index as well.
- Capacity: initially starts at 10 and resizes when full. Though in the constructor, you can specify a larger
  size. e.g. new ArrayList<Integer>(500); note that primitives can't be ArrayLists-- BUT wrapper classes like
  big I Integer can.
- An array's objects are sequential/contiguous in terms of memory location, but ArrayList's objects are anywhere.
  It's a little like C arrays vs. C linked lists (specifically in terms of memory location).
- Arrays can be more performant in certain cases: such as if you know the amount of elements, it can be faster
  with primitives-- also the contiguous memory nature of it does make things a bit faster.
- You can also construct it from another List or Array to "seed it." Such as new ArrayList<Array|ArrayList>;
- 

==Architecture==
- For comparison, C's compiler is specific to the OS. And sometimes if the OS that you originally dev'ed code
  on, per se, is diff from a new OS, and datatypes are diff (say int is 4 bits stead of 8 bits), 
  sometimes you need to rewrite your code.
- Instead, Java has a JVM in the JRE that uses libraries which compiles your bytecode into assembly. Note
  that bytecode is unreadable to the OS, it is compiled into Assembly(?) 
- 

==Basics==
- INTEGER TYPES
  - byte   1B
  - short  2B
  - int    4B
  - long   8B
- REAL TYPES
  - float  4B
  - double 8B
- char     2B
- bool     ?
- OPERATING ON STUFF
- Java is a type-safe language (strongly typed?)
- Variable: Memory location allocated to store a value.
- Note identifiers can only start with $, _, or A-z.
  - A lot of the time people start identifiers with _ for private variables.
- character 2+ (after the first) can be any letter or number.
- There are reserved keywords that you cant use as an identifier. (e.g. main)
- Case matters
  - For Classes, convention dictates that they start with upper case (e.g. public class 
    ClassRoom)
  - Variables should start with lower case (e.g. int sizeOfClass).
- Integer division will truncate the remaining floating point. (e.g. 239/10 = 23 instead of 24)
- implicitly casting generally works on compilation for a smaller datatype to a larger one (e.g.
  double = int works, but int = double, doesn't. int is 4B, double is 8b.)
- you can eplicitly cast more precise datatypes to less precise datatypes by casting, but it 
  should be done carefully (e.g. int i = (int) 10.0000001)

==Conditionals==
- In validating Strings you can do a String.equals("ComparisonString").
- Note that you can't do the Switch statement with float double (!) b/c of the precision.
- 

==Precision==
- Boolean math is not really ever right (precision is kind of infinite) so how does 1 = 1?
- The way this is accounted for is using tolerances of epsilon. But epsilon can vary depending on 
  what kind of data type you are using and at what kind of precision you are looking for in your 
  conditional check. So the range of where 5 is 5 is between (5 - epsilon, 5 + epsilon). And the
  full form of an if condition is "if ((5-value) < epsilon)" instead of "if (5==value)"

==Objects==
- an Object is a copy of a class that is instantiated in memory with certain properties.
- a constructor is a special method which instantiates an object. 
- you can have noargs constructor which constructs an object without any arguments. 
- when you instantiate an object from another object, note that the new object is using the address (or
  reference) from the original object. This can cause confusion. If you are not using the "new" keyword
  you are creating a reference instead of an entirely new object.
- Static is used when you don't have to instantiate an object to have an effect. For example with the 
  Math library, such as Math.abs(), we don't need an object to do the absolute operation, we can just
  call the method. 
- 

==Loops==
- note that your loop variables are local only to your loop, they can't be used anywhere else (unless
  you actually declare your loop variable outside of the loop. for example in for (int i; ...) I can't
  use "i" anywhere other than within the {} of your loop.
- other than the "normal" flow of your loop, you can use BREAK and CONTINUE. BREAK will take you out
  of your loop altogether. CONTINUE will skip back to the top of the loop (ignores the remainder of
  the loop block as of the CONTINUE.)
- "for each loop" : it has to run through every element. it can never go out of bounds. It can not 
  scroll and jump around and generally loses the concept of an index. it only does the curly
  brace code literally for each element.
	for (int number : numbers){
		System.out.println(number)
	}

==Arrays==
- the array object in Java has a number of nice functions: .binarySearch which will return the
  index of a given element in a sorted array. also .equals which returns a boolean if arg[0]
  and arg[1] are the same. this is different from ==. == checks the reference (if they are
  the same block of memory.) .equals actually looks at the values themselves. note order
  matters fro .equals. .deepEquals is the same as equals, but will work for an array of
  arrays. also .toString will give you the array as a String delimited by commas.
  

==Exceptions==
- FileWriter() object: this is a convenience object for writing streams of character to a file.
- BufferedWriter() object: 


==Misc==
- Documentation comment abstracts things and tells people what is happening. An Implementation comment
  is used to explain why certain things are implemented as they are (for example: documentation - this
  gets a user's input. implementation - I chose this data type because I want a lot of precision.)
- Java docs: java 8 docs is online documentation.
- System.out.printf stands for "print format" and you can do things like format the number of decimals in
  a float or double, etc. It's quite useful for logs.
- Java is short circuited. For example, the moment it finds something won't work, it won't do the other
  operations or code you have in place. For example ( (A == B) && C == B ), it won't check if C == B if 
  A doesn't == B.
- the "String" pool is a pool of memory that java does funny stuff with. When you create a String literal, 
  java will check if there is an object in the String pool which is of equivalent value. So in other words
  you'll end up with two Strings pointing to the same value without knowing it.
- Try catch has a convention to be used: see below
		/*
		 ** this code is commented for learnings. Doing a 
		    recursive try .. catch is not ideal for multiple
		    reasons, such as if a person does a bunch of invalid
		    inputs, they can cause a stack overflow. And 
		    it is the convention for the try ... catch to be
		    used for exception handling instead of this 
		    input forcing. (it is not good practice to include this
		    comment, but due to certain issues with nano, doing
		    this. This is discused with TA.)

		//(local?) var to hold Scanner input
		double tryDouble;

		//exception handling for invalid inputs
		try {
			tryDouble = usInput.nextDouble();
			return tryDouble;
		}
		catch (InputMismatchException e) {
			usInput.next(); //to consume current invalid input avoid endless loop
			System.out.println("Only numericals accepted");
			return tryInput(); //recursing to the function to prompt for input again on invalid input
		}
		//need another catch for numerical truncation on overflow
*/

== More Advanced ==
- you can have something have two methods of the same name: https://beginnersbook.com/2013/05/method-overloading/
- the String .compareTo or .compareToIgnoreCase (gives you a lexographical compare of the two strings -1, 0, 1
  based on s1<s2 = s1>s2)
- Substring: creates a new string as part of the another String. String.substring(from_index, to_index)
- String buffer and String builder should be used when you are trying to make strings mutable (such as 
  when you are doing some looping concatenation, for example.) But note you want to use String buffer over
  builder because it's more parallel processing friendly.

== REGEX ==
String s = "I like cheese"
USING THE EXAMPLE: s.replace("[cheese]","dumpling!")
- [abc] : matches a || b || c 
- [^abc] : does not start with 
- [a-zA-Z] : match any two characters between a-Z
- [0-9] || \d : match any digit
- [0-9] || \D : match any non digit
- \s : match any whitespace
- \S : match any non white space
- \w : match word character
- \W : match any non word character
- you can do String.split("\\s") in order to split on any whitespace
